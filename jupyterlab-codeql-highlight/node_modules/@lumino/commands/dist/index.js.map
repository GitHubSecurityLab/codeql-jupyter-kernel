{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt } from '@lumino/algorithm';\n\nimport {\n  JSONExt,\n  ReadonlyJSONObject,\n  ReadonlyPartialJSONObject\n} from '@lumino/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\nimport { Platform, Selector } from '@lumino/domutils';\n\nimport { getKeyboardLayout } from '@lumino/keyboard';\n\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { VirtualElement } from '@lumino/virtualdom';\n\n/**\n * An object which manages a collection of commands.\n *\n * #### Notes\n * A command registry can be used to populate a variety of action-based\n * widgets, such as command palettes, menus, and toolbars.\n */\nexport class CommandRegistry {\n  /**\n   * A signal emitted when a command has changed.\n   *\n   * #### Notes\n   * This signal is useful for visual representations of commands which\n   * need to refresh when the state of a relevant command has changed.\n   */\n  get commandChanged(): ISignal<this, CommandRegistry.ICommandChangedArgs> {\n    return this._commandChanged;\n  }\n\n  /**\n   * A signal emitted when a command has executed.\n   *\n   * #### Notes\n   * Care should be taken when consuming this signal. The command system is used\n   * by many components for many user actions. Handlers registered with this\n   * signal must return quickly to ensure the overall application remains responsive.\n   */\n  get commandExecuted(): ISignal<this, CommandRegistry.ICommandExecutedArgs> {\n    return this._commandExecuted;\n  }\n\n  /**\n   * A signal emitted when a key binding is changed.\n   */\n  get keyBindingChanged(): ISignal<\n    this,\n    CommandRegistry.IKeyBindingChangedArgs\n  > {\n    return this._keyBindingChanged;\n  }\n\n  /**\n   * A read-only array of the key bindings in the registry.\n   */\n  get keyBindings(): ReadonlyArray<CommandRegistry.IKeyBinding> {\n    return this._keyBindings;\n  }\n\n  /**\n   * List the ids of the registered commands.\n   *\n   * @returns A new array of the registered command ids.\n   */\n  listCommands(): string[] {\n    return Object.keys(this._commands);\n  }\n\n  /**\n   * Test whether a specific command is registered.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @returns `true` if the command is registered, `false` otherwise.\n   */\n  hasCommand(id: string): boolean {\n    return id in this._commands;\n  }\n\n  /**\n   * Add a command to the registry.\n   *\n   * @param id - The unique id of the command.\n   *\n   * @param options - The options for the command.\n   *\n   * @returns A disposable which will remove the command.\n   *\n   * @throws An error if the given `id` is already registered.\n   */\n  addCommand(\n    id: string,\n    options: CommandRegistry.ICommandOptions\n  ): IDisposable {\n    // Throw an error if the id is already registered.\n    if (id in this._commands) {\n      throw new Error(`Command '${id}' already registered.`);\n    }\n\n    // Add the command to the registry.\n    this._commands[id] = Private.createCommand(options);\n\n    // Emit the `commandChanged` signal.\n    this._commandChanged.emit({ id, type: 'added' });\n\n    // Return a disposable which will remove the command.\n    return new DisposableDelegate(() => {\n      // Remove the command from the registry.\n      delete this._commands[id];\n\n      // Emit the `commandChanged` signal.\n      this._commandChanged.emit({ id, type: 'removed' });\n    });\n  }\n\n  /**\n   * Notify listeners that the state of a command has changed.\n   *\n   * @param id - The id of the command which has changed. If more than\n   *   one command has changed, this argument should be omitted.\n   *\n   * @throws An error if the given `id` is not registered.\n   *\n   * #### Notes\n   * This method should be called by the command author whenever the\n   * application state changes such that the results of the command\n   * metadata functions may have changed.\n   *\n   * This will cause the `commandChanged` signal to be emitted.\n   */\n  notifyCommandChanged(id?: string): void {\n    if (id !== undefined && !(id in this._commands)) {\n      throw new Error(`Command '${id}' is not registered.`);\n    }\n    this._commandChanged.emit({ id, type: id ? 'changed' : 'many-changed' });\n  }\n\n  /**\n   * Get the display label for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The display label for the command, or an empty string\n   *   if the command is not registered.\n   */\n  label(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.label.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the mnemonic index for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The mnemonic index for the command, or `-1` if the\n   *   command is not registered.\n   */\n  mnemonic(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): number {\n    let cmd = this._commands[id];\n    return cmd ? cmd.mnemonic.call(undefined, args) : -1;\n  }\n\n  /**\n   * Get the icon renderer for a specific command.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will\n   * function as an alias for the .iconClass field, for backwards\n   * compatibility. In the future when this is removed, the default\n   * return type will become undefined.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon renderer for the command, or\n   *   an empty string if the command is not registered.\n   */\n  icon(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ):\n    | VirtualElement.IRenderer\n    | undefined\n    /* <DEPRECATED> */\n    | string /* </DEPRECATED> */ {\n    let cmd = this._commands[id];\n    return cmd\n      ? cmd.icon.call(undefined, args)\n      : /* <DEPRECATED> */ '' /* </DEPRECATED> */ /* <FUTURE> undefined </FUTURE> */;\n  }\n\n  /**\n   * Get the icon class for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon class for the command, or an empty string if\n   *   the command is not registered.\n   */\n  iconClass(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.iconClass.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the icon label for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon label for the command, or an empty string if\n   *   the command is not registered.\n   */\n  iconLabel(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.iconLabel.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the short form caption for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The caption for the command, or an empty string if the\n   *   command is not registered.\n   */\n  caption(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.caption.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the usage help text for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The usage text for the command, or an empty string if\n   *   the command is not registered.\n   */\n  usage(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.usage.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the extra class name for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The class name for the command, or an empty string if\n   *   the command is not registered.\n   */\n  className(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands[id];\n    return cmd ? cmd.className.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the dataset for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The dataset for the command, or an empty dataset if\n   *   the command is not registered.\n   */\n  dataset(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): CommandRegistry.Dataset {\n    let cmd = this._commands[id];\n    return cmd ? cmd.dataset.call(undefined, args) : {};\n  }\n\n  /**\n   * Test whether a specific command is enabled.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is enabled,\n   *   or `false` if the command is not registered.\n   */\n  isEnabled(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands[id];\n    return cmd ? cmd.isEnabled.call(undefined, args) : false;\n  }\n\n  /**\n   * Test whether a specific command is toggled.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is toggled,\n   *   or `false` if the command is not registered.\n   */\n  isToggled(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands[id];\n    return cmd ? cmd.isToggled.call(undefined, args) : false;\n  }\n\n  /**\n   * Test whether a specific command is toggleable.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is toggleable,\n   *   or `false` if the command is not registered.\n   */\n  isToggleable(\n    id: string,\n    args: ReadonlyJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands[id];\n    return cmd ? cmd.isToggleable : false;\n  }\n\n  /**\n   * Test whether a specific command is visible.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is visible,\n   *   or `false` if the command is not registered.\n   */\n  isVisible(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands[id];\n    return cmd ? cmd.isVisible.call(undefined, args) : false;\n  }\n\n  /**\n   * Execute a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A promise which resolves with the result of the command.\n   *\n   * #### Notes\n   * The promise will reject if the command throws an exception,\n   * or if the command is not registered.\n   */\n  execute(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): Promise<any> {\n    // Reject if the command is not registered.\n    let cmd = this._commands[id];\n    if (!cmd) {\n      return Promise.reject(new Error(`Command '${id}' not registered.`));\n    }\n\n    // Execute the command and reject if an exception is thrown.\n    let value: any;\n    try {\n      value = cmd.execute.call(undefined, args);\n    } catch (err) {\n      value = Promise.reject(err);\n    }\n\n    // Create the return promise which resolves the result.\n    let result = Promise.resolve(value);\n\n    // Emit the command executed signal.\n    this._commandExecuted.emit({ id, args, result });\n\n    // Return the result promise to the caller.\n    return result;\n  }\n\n  /**\n   * Add a key binding to the registry.\n   *\n   * @param options - The options for creating the key binding.\n   *\n   * @returns A disposable which removes the added key binding.\n   *\n   * #### Notes\n   * If multiple key bindings are registered for the same sequence, the\n   * binding with the highest selector specificity is executed first. A\n   * tie is broken by using the most recently added key binding.\n   *\n   * Ambiguous key bindings are resolved with a timeout. As an example,\n   * suppose two key bindings are registered: one with the key sequence\n   * `['Ctrl D']`, and another with `['Ctrl D', 'Ctrl W']`. If the user\n   * presses `Ctrl D`, the first binding cannot be immediately executed\n   * since the user may intend to complete the chord with `Ctrl W`. For\n   * such cases, a timer is used to allow the chord to be completed. If\n   * the chord is not completed before the timeout, the first binding\n   * is executed.\n   */\n  addKeyBinding(options: CommandRegistry.IKeyBindingOptions): IDisposable {\n    // Create the binding for the given options.\n    let binding = Private.createKeyBinding(options);\n\n    // Add the key binding to the bindings array.\n    this._keyBindings.push(binding);\n\n    // Emit the `bindingChanged` signal.\n    this._keyBindingChanged.emit({ binding, type: 'added' });\n\n    // Return a disposable which will remove the binding.\n    return new DisposableDelegate(() => {\n      // Remove the binding from the array.\n      ArrayExt.removeFirstOf(this._keyBindings, binding);\n\n      // Emit the `bindingChanged` signal.\n      this._keyBindingChanged.emit({ binding, type: 'removed' });\n    });\n  }\n\n  /**\n   * Process a `'keydown'` event and invoke a matching key binding.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * #### Notes\n   * This should be called in response to a `'keydown'` event in order\n   * to invoke the command for the best matching key binding.\n   *\n   * The registry **does not** install its own listener for `'keydown'`\n   * events. This allows the application full control over the nodes\n   * and phase for which the registry processes `'keydown'` events.\n   *\n   * When the keydown event is processed, if the event target or any of its\n   * ancestor nodes has a `data-lm-suppress-shortcuts` attribute, its keydown\n   * events will not invoke commands.\n   */\n  processKeydownEvent(event: KeyboardEvent): void {\n    // Bail immediately if playing back keystrokes.\n    if (this._replaying || CommandRegistry.isModifierKeyPressed(event)) {\n      return;\n    }\n\n    // Get the normalized keystroke for the event.\n    let keystroke = CommandRegistry.keystrokeForKeydownEvent(event);\n\n    // If the keystroke is not valid for the keyboard layout, replay\n    // any suppressed events and clear the pending state.\n    if (!keystroke) {\n      this._replayKeydownEvents();\n      this._clearPendingState();\n      return;\n    }\n\n    // Add the keystroke to the current key sequence.\n    this._keystrokes.push(keystroke);\n\n    // Find the exact and partial matches for the key sequence.\n    let { exact, partial } = Private.matchKeyBinding(\n      this._keyBindings,\n      this._keystrokes,\n      event\n    );\n\n    // If there is no exact match and no partial match, replay\n    // any suppressed events and clear the pending state.\n    if (!exact && !partial) {\n      this._replayKeydownEvents();\n      this._clearPendingState();\n      return;\n    }\n\n    // Stop propagation of the event. If there is only a partial match,\n    // the event will be replayed if a final exact match never occurs.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // If there is an exact match but no partial match, the exact match\n    // can be dispatched immediately. The pending state is cleared so\n    // the next key press starts from the default state.\n    if (exact && !partial) {\n      this._executeKeyBinding(exact);\n      this._clearPendingState();\n      return;\n    }\n\n    // If there is both an exact match and a partial match, the exact\n    // match is stored for future dispatch in case the timer expires\n    // before a more specific match is triggered.\n    if (exact) {\n      this._exactKeyMatch = exact;\n    }\n\n    // Store the event for possible playback in the future.\n    this._keydownEvents.push(event);\n\n    // (Re)start the timer to dispatch the most recent exact match\n    // in case the partial match fails to result in an exact match.\n    this._startTimer();\n  }\n\n  /**\n   * Start or restart the pending timeout.\n   */\n  private _startTimer(): void {\n    this._clearTimer();\n    this._timerID = window.setTimeout(() => {\n      this._onPendingTimeout();\n    }, Private.CHORD_TIMEOUT);\n  }\n\n  /**\n   * Clear the pending timeout.\n   */\n  private _clearTimer(): void {\n    if (this._timerID !== 0) {\n      clearTimeout(this._timerID);\n      this._timerID = 0;\n    }\n  }\n\n  /**\n   * Replay the keydown events which were suppressed.\n   */\n  private _replayKeydownEvents(): void {\n    if (this._keydownEvents.length === 0) {\n      return;\n    }\n    this._replaying = true;\n    this._keydownEvents.forEach(Private.replayKeyEvent);\n    this._replaying = false;\n  }\n\n  /**\n   * Execute the command for the given key binding.\n   *\n   * If the command is missing or disabled, a warning will be logged.\n   */\n  private _executeKeyBinding(binding: CommandRegistry.IKeyBinding): void {\n    let { command, args } = binding;\n    if (!this.hasCommand(command) || !this.isEnabled(command, args)) {\n      let word = this.hasCommand(command) ? 'enabled' : 'registered';\n      let keys = binding.keys.join(', ');\n      let msg1 = `Cannot execute key binding '${keys}':`;\n      let msg2 = `command '${command}' is not ${word}.`;\n      console.warn(`${msg1} ${msg2}`);\n      return;\n    }\n    this.execute(command, args);\n  }\n\n  /**\n   * Clear the internal pending state.\n   */\n  private _clearPendingState(): void {\n    this._clearTimer();\n    this._exactKeyMatch = null;\n    this._keystrokes.length = 0;\n    this._keydownEvents.length = 0;\n  }\n\n  /**\n   * Handle the partial match timeout.\n   */\n  private _onPendingTimeout(): void {\n    this._timerID = 0;\n    if (this._exactKeyMatch) {\n      this._executeKeyBinding(this._exactKeyMatch);\n    } else {\n      this._replayKeydownEvents();\n    }\n    this._clearPendingState();\n  }\n\n  private _timerID = 0;\n  private _replaying = false;\n  private _keystrokes: string[] = [];\n  private _keydownEvents: KeyboardEvent[] = [];\n  private _keyBindings: CommandRegistry.IKeyBinding[] = [];\n  private _exactKeyMatch: CommandRegistry.IKeyBinding | null = null;\n  private _commands: { [id: string]: Private.ICommand } = Object.create(null);\n  private _commandChanged = new Signal<\n    this,\n    CommandRegistry.ICommandChangedArgs\n  >(this);\n  private _commandExecuted = new Signal<\n    this,\n    CommandRegistry.ICommandExecutedArgs\n  >(this);\n  private _keyBindingChanged = new Signal<\n    this,\n    CommandRegistry.IKeyBindingChangedArgs\n  >(this);\n}\n\n/**\n * The namespace for the `CommandRegistry` class statics.\n */\nexport namespace CommandRegistry {\n  /**\n   * A type alias for a user-defined command function.\n   */\n  export type CommandFunc<T> = (args: ReadonlyPartialJSONObject) => T;\n\n  /**\n   * A type alias for a simple immutable string dataset.\n   */\n  export type Dataset = { readonly [key: string]: string };\n\n  /**\n   * An options object for creating a command.\n   *\n   * #### Notes\n   * A command is an abstract representation of code to be executed along\n   * with metadata for describing how the command should be displayed in\n   * a visual representation.\n   *\n   * A command is a collection of functions, *not* methods. The command\n   * registry will always invoke the command functions with a `thisArg`\n   * which is `undefined`.\n   */\n  export interface ICommandOptions {\n    /**\n     * The function to invoke when the command is executed.\n     *\n     * #### Notes\n     * This should return the result of the command (if applicable) or\n     * a promise which yields the result. The result is resolved as a\n     * promise and that promise is returned to the code which executed\n     * the command.\n     *\n     * This may be invoked even when `isEnabled` returns `false`.\n     */\n    execute: CommandFunc<any | Promise<any>>;\n\n    /**\n     * The label for the command.\n     *\n     * #### Notes\n     * This can be a string literal, or a function which returns the\n     * label based on the provided command arguments.\n     *\n     * The label is often used as the primary text for the command.\n     *\n     * The default value is an empty string.\n     */\n    label?: string | CommandFunc<string>;\n\n    /**\n     * The index of the mnemonic character in the command's label.\n     *\n     * #### Notes\n     * This can be an index literal, or a function which returns the\n     * mnemonic index based on the provided command arguments.\n     *\n     * The mnemonic character is often used by menus to provide easy\n     * single-key keyboard access for triggering a menu item. It is\n     * typically rendered as an underlined character in the label.\n     *\n     * The default value is `-1`.\n     */\n    mnemonic?: number | CommandFunc<number>;\n\n    /**\n     * The icon renderer for the command.\n     *\n     * #### Notes\n     * This can be an IRenderer object, or a function which returns the\n     * renderer based on the provided command arguments.\n     *\n     * The default value is undefined.\n     *\n     * DEPRECATED: if set to a string value, the .icon field will function as\n     * an alias for the .iconClass field, for backwards compatibility\n     */\n    icon?:\n      | VirtualElement.IRenderer\n      | undefined\n      /* <DEPRECATED> */\n      | string /* </DEPRECATED> */\n      | CommandFunc<\n          | VirtualElement.IRenderer\n          | undefined\n          /* <DEPRECATED> */\n          | string /* </DEPRECATED> */\n        >;\n\n    /**\n     * The icon class for the command.\n     *\n     * #### Notes\n     * This class name will be added to the icon node for the visual\n     * representation of the command.\n     *\n     * Multiple class names can be separated with white space.\n     *\n     * This can be a string literal, or a function which returns the\n     * icon based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    iconClass?: string | CommandFunc<string>;\n\n    /**\n     * The icon label for the command.\n     *\n     * #### Notes\n     * This label will be added as text to the icon node for the visual\n     * representation of the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * label based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    iconLabel?: string | CommandFunc<string>;\n\n    /**\n     * The caption for the command.\n     *\n     * #### Notes\n     * This should be a simple one line description of the command. It\n     * is used by some visual representations to show quick info about\n     * the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * caption based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    caption?: string | CommandFunc<string>;\n\n    /**\n     * The usage text for the command.\n     *\n     * #### Notes\n     * This should be a full description of the command, which includes\n     * information about the structure of the arguments and the type of\n     * the return value. It is used by some visual representations when\n     * displaying complete help info about the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * usage text based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    usage?: string | CommandFunc<string>;\n\n    /**\n     * The general class name for the command.\n     *\n     * #### Notes\n     * This class name will be added to the primary node for the visual\n     * representation of the command.\n     *\n     * Multiple class names can be separated with white space.\n     *\n     * This can be a string literal, or a function which returns the\n     * class name based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    className?: string | CommandFunc<string>;\n\n    /**\n     * The dataset for the command.\n     *\n     * #### Notes\n     * The dataset values will be added to the primary node for the\n     * visual representation of the command.\n     *\n     * This can be a dataset object, or a function which returns the\n     * dataset object based on the provided command arguments.\n     *\n     * The default value is an empty dataset.\n     */\n    dataset?: Dataset | CommandFunc<Dataset>;\n\n    /**\n     * A function which indicates whether the command is enabled.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a disabled\n     * command as grayed-out or in some other non-interactive fashion.\n     *\n     * The default value is `() => true`.\n     */\n    isEnabled?: CommandFunc<boolean>;\n\n    /**\n     * A function which indicates whether the command is toggled.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a toggled\n     * command in a different form, such as a check mark icon for a\n     * menu item or a depressed state for a toggle button.\n     *\n     * The default value is `() => false`.\n     */\n    isToggled?: CommandFunc<boolean>;\n\n    /**\n     * A function which indicates whether the command is toggleable.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a toggled command in\n     * a different form, such as a check box for a menu item or a depressed\n     * state for a toggle button. This attribute also allows for accessible\n     * interfaces to notify the user that the command corresponds to some state.\n     *\n     * The default value is `true` if an `isToggled` function is given, `false`\n     * otherwise.\n     */\n    isToggleable?: boolean;\n\n    /**\n     * A function which indicates whether the command is visible.\n     *\n     * #### Notes\n     * Visual representations may use this value to hide or otherwise\n     * not display a non-visible command.\n     *\n     * The default value is `() => true`.\n     */\n    isVisible?: CommandFunc<boolean>;\n  }\n\n  /**\n   * An arguments object for the `commandChanged` signal.\n   */\n  export interface ICommandChangedArgs {\n    /**\n     * The id of the associated command.\n     *\n     * This will be `undefined` when the type is `'many-changed'`.\n     */\n    readonly id: string | undefined;\n\n    /**\n     * Whether the command was added, removed, or changed.\n     */\n    readonly type: 'added' | 'removed' | 'changed' | 'many-changed';\n  }\n\n  /**\n   * An arguments object for the `commandExecuted` signal.\n   */\n  export interface ICommandExecutedArgs {\n    /**\n     * The id of the associated command.\n     */\n    readonly id: string;\n\n    /**\n     * The arguments object passed to the command.\n     */\n    readonly args: ReadonlyPartialJSONObject;\n\n    /**\n     * The promise which resolves with the result of the command.\n     */\n    readonly result: Promise<any>;\n  }\n\n  /**\n   * An options object for creating a key binding.\n   */\n  export interface IKeyBindingOptions {\n    /**\n     * The default key sequence for the key binding.\n     *\n     * A key sequence is composed of one or more keystrokes, where each\n     * keystroke is a combination of modifiers and a primary key.\n     *\n     * Most key sequences will contain a single keystroke. Key sequences\n     * with multiple keystrokes are called \"chords\", and are useful for\n     * implementing modal input (ala Vim).\n     *\n     * Each keystroke in the sequence should be of the form:\n     *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\n     *\n     * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\n     * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\n     * `Ctrl` on all other platforms. The `Cmd` modifier is ignored on\n     * non-Mac platforms.\n     *\n     * Keystrokes are case sensitive.\n     *\n     * **Examples:** `['Accel C']`, `['Shift F11']`, `['D', 'D']`\n     */\n    keys: string[];\n\n    /**\n     * The CSS selector for the key binding.\n     *\n     * The key binding will only be invoked when the selector matches a\n     * node on the propagation path of the keydown event. This allows\n     * the key binding to be restricted to user-defined contexts.\n     *\n     * The selector must not contain commas.\n     */\n    selector: string;\n\n    /**\n     * The id of the command to execute when the binding is matched.\n     */\n    command: string;\n\n    /**\n     * The arguments for the command, if necessary.\n     *\n     * The default value is an empty object.\n     */\n    args?: ReadonlyPartialJSONObject;\n\n    /**\n     * The key sequence to use when running on Windows.\n     *\n     * If provided, this will override `keys` on Windows platforms.\n     */\n    winKeys?: string[];\n\n    /**\n     * The key sequence to use when running on Mac.\n     *\n     * If provided, this will override `keys` on Mac platforms.\n     */\n    macKeys?: string[];\n\n    /**\n     * The key sequence to use when running on Linux.\n     *\n     * If provided, this will override `keys` on Linux platforms.\n     */\n    linuxKeys?: string[];\n  }\n\n  /**\n   * An object which represents a key binding.\n   *\n   * #### Notes\n   * A key binding is an immutable object created by a registry.\n   */\n  export interface IKeyBinding {\n    /**\n     * The key sequence for the binding.\n     */\n    readonly keys: ReadonlyArray<string>;\n\n    /**\n     * The CSS selector for the binding.\n     */\n    readonly selector: string;\n\n    /**\n     * The command executed when the binding is matched.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyPartialJSONObject;\n  }\n\n  /**\n   * An arguments object for the `keyBindingChanged` signal.\n   */\n  export interface IKeyBindingChangedArgs {\n    /**\n     * The key binding which was changed.\n     */\n    readonly binding: IKeyBinding;\n\n    /**\n     * Whether the key binding was added or removed.\n     */\n    readonly type: 'added' | 'removed';\n  }\n\n  /**\n   * An object which holds the results of parsing a keystroke.\n   */\n  export interface IKeystrokeParts {\n    /**\n     * Whether `'Cmd'` appears in the keystroke.\n     */\n    cmd: boolean;\n\n    /**\n     * Whether `'Ctrl'` appears in the keystroke.\n     */\n    ctrl: boolean;\n\n    /**\n     * Whether `'Alt'` appears in the keystroke.\n     */\n    alt: boolean;\n\n    /**\n     * Whether `'Shift'` appears in the keystroke.\n     */\n    shift: boolean;\n\n    /**\n     * The primary key for the keystroke.\n     */\n    key: string;\n  }\n\n  /**\n   * Parse a keystroke into its constituent components.\n   *\n   * @param keystroke - The keystroke of interest.\n   *\n   * @returns The parsed components of the keystroke.\n   *\n   * #### Notes\n   * The keystroke should be of the form:\n   *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\n   *\n   * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\n   * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\n   * `Ctrl` on all other platforms.\n   *\n   * The parsing is tolerant and will not throw exceptions. Notably:\n   *   - Duplicate modifiers are ignored.\n   *   - Extra primary keys are ignored.\n   *   - The order of modifiers and primary key is irrelevant.\n   *   - The keystroke parts should be separated by whitespace.\n   *   - The keystroke is case sensitive.\n   */\n  export function parseKeystroke(keystroke: string): IKeystrokeParts {\n    let key = '';\n    let alt = false;\n    let cmd = false;\n    let ctrl = false;\n    let shift = false;\n    for (let token of keystroke.split(/\\s+/)) {\n      if (token === 'Accel') {\n        if (Platform.IS_MAC) {\n          cmd = true;\n        } else {\n          ctrl = true;\n        }\n      } else if (token === 'Alt') {\n        alt = true;\n      } else if (token === 'Cmd') {\n        cmd = true;\n      } else if (token === 'Ctrl') {\n        ctrl = true;\n      } else if (token === 'Shift') {\n        shift = true;\n      } else if (token.length > 0) {\n        key = token;\n      }\n    }\n    return { cmd, ctrl, alt, shift, key };\n  }\n\n  /**\n   * Normalize a keystroke into a canonical representation.\n   *\n   * @param keystroke - The keystroke of interest.\n   *\n   * @returns The normalized representation of the keystroke.\n   *\n   * #### Notes\n   * This normalizes the keystroke by removing duplicate modifiers and\n   * extra primary keys, and assembling the parts in a canonical order.\n   *\n   * The `Cmd` modifier is ignored on non-Mac platforms.\n   */\n  export function normalizeKeystroke(keystroke: string): string {\n    let mods = '';\n    let parts = parseKeystroke(keystroke);\n    if (parts.ctrl) {\n      mods += 'Ctrl ';\n    }\n    if (parts.alt) {\n      mods += 'Alt ';\n    }\n    if (parts.shift) {\n      mods += 'Shift ';\n    }\n    if (parts.cmd && Platform.IS_MAC) {\n      mods += 'Cmd ';\n    }\n    return mods + parts.key;\n  }\n\n  /**\n   * Get the platform-specific normalized keys for an options object.\n   *\n   * @param options - The options for the key binding.\n   *\n   * @returns Array of combined, normalized keys.\n   */\n  export function normalizeKeys(options: IKeyBindingOptions): string[] {\n    let keys: string[];\n    if (Platform.IS_WIN) {\n      keys = options.winKeys || options.keys;\n    } else if (Platform.IS_MAC) {\n      keys = options.macKeys || options.keys;\n    } else {\n      keys = options.linuxKeys || options.keys;\n    }\n    return keys.map(normalizeKeystroke);\n  }\n\n  /**\n   * Format a keystroke for display on the local system.\n   */\n  export function formatKeystroke(keystroke: string): string {\n    let mods = [];\n    let separator = Platform.IS_MAC ? ' ' : '+';\n    let parts = parseKeystroke(keystroke);\n    if (parts.ctrl) {\n      mods.push('Ctrl');\n    }\n    if (parts.alt) {\n      mods.push('Alt');\n    }\n    if (parts.shift) {\n      mods.push('Shift');\n    }\n    if (Platform.IS_MAC && parts.cmd) {\n      mods.push('Cmd');\n    }\n    mods.push(parts.key);\n    return mods.map(Private.formatKey).join(separator);\n  }\n\n  /**\n   * Check if `'keydown'` event is caused by pressing a modifier key that should be ignored.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * @returns `true` if modifier key was pressed, `false` otherwise.\n   */\n  export function isModifierKeyPressed(event: KeyboardEvent): boolean {\n    let layout = getKeyboardLayout();\n    let key = layout.keyForKeydownEvent(event);\n    return layout.isModifierKey(key);\n  }\n\n  /**\n   * Create a normalized keystroke for a `'keydown'` event.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * @returns A normalized keystroke, or an empty string if the event\n   *   does not represent a valid keystroke for the given layout.\n   */\n  export function keystrokeForKeydownEvent(event: KeyboardEvent): string {\n    let layout = getKeyboardLayout();\n    let key = layout.keyForKeydownEvent(event);\n    if (!key || layout.isModifierKey(key)) {\n      return '';\n    }\n    let mods = [];\n    if (event.ctrlKey) {\n      mods.push('Ctrl');\n    }\n    if (event.altKey) {\n      mods.push('Alt');\n    }\n    if (event.shiftKey) {\n      mods.push('Shift');\n    }\n    if (event.metaKey && Platform.IS_MAC) {\n      mods.push('Cmd');\n    }\n    mods.push(key);\n    return mods.join(' ');\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The timeout in ms for triggering a key binding chord.\n   */\n  export const CHORD_TIMEOUT = 1000;\n\n  /**\n   * A convenience type alias for a command func.\n   */\n  export type CommandFunc<T> = CommandRegistry.CommandFunc<T>;\n\n  /**\n   * A convenience type alias for a command dataset.\n   */\n  export type Dataset = CommandRegistry.Dataset;\n\n  /**\n   * A normalized command object.\n   */\n  export interface ICommand {\n    readonly execute: CommandFunc<any>;\n    readonly label: CommandFunc<string>;\n    readonly mnemonic: CommandFunc<number>;\n\n    readonly icon: CommandFunc<\n      | VirtualElement.IRenderer\n      | undefined\n      /* <DEPRECATED> */\n      | string /* </DEPRECATED> */\n    >;\n\n    readonly iconClass: CommandFunc<string>;\n    readonly iconLabel: CommandFunc<string>;\n    readonly caption: CommandFunc<string>;\n    readonly usage: CommandFunc<string>;\n    readonly className: CommandFunc<string>;\n    readonly dataset: CommandFunc<Dataset>;\n    readonly isEnabled: CommandFunc<boolean>;\n    readonly isToggled: CommandFunc<boolean>;\n    readonly isToggleable: boolean;\n    readonly isVisible: CommandFunc<boolean>;\n  }\n\n  /**\n   * Create a normalized command from an options object.\n   */\n  export function createCommand(\n    options: CommandRegistry.ICommandOptions\n  ): ICommand {\n    let icon;\n    let iconClass;\n\n    /* <DEPRECATED> */\n    if (!options.icon || typeof options.icon === 'string') {\n      // alias icon to iconClass\n      iconClass = asFunc(options.iconClass || options.icon, emptyStringFunc);\n      icon = iconClass;\n    } else {\n      /* /<DEPRECATED> */\n\n      iconClass = asFunc(options.iconClass, emptyStringFunc);\n      icon = asFunc(options.icon, undefinedFunc);\n\n      /* <DEPRECATED> */\n    }\n    /* </DEPRECATED> */\n\n    return {\n      execute: options.execute,\n      label: asFunc(options.label, emptyStringFunc),\n      mnemonic: asFunc(options.mnemonic, negativeOneFunc),\n      icon,\n      iconClass,\n      iconLabel: asFunc(options.iconLabel, emptyStringFunc),\n      caption: asFunc(options.caption, emptyStringFunc),\n      usage: asFunc(options.usage, emptyStringFunc),\n      className: asFunc(options.className, emptyStringFunc),\n      dataset: asFunc(options.dataset, emptyDatasetFunc),\n      isEnabled: options.isEnabled || trueFunc,\n      isToggled: options.isToggled || falseFunc,\n      isToggleable: options.isToggleable || !!options.isToggled,\n      isVisible: options.isVisible || trueFunc\n    };\n  }\n\n  /**\n   * Create a key binding object from key binding options.\n   */\n  export function createKeyBinding(\n    options: CommandRegistry.IKeyBindingOptions\n  ): CommandRegistry.IKeyBinding {\n    return {\n      keys: CommandRegistry.normalizeKeys(options),\n      selector: validateSelector(options),\n      command: options.command,\n      args: options.args || JSONExt.emptyObject\n    };\n  }\n\n  /**\n   * An object which holds the results of a key binding match.\n   */\n  export interface IMatchResult {\n    /**\n     * The best key binding which exactly matches the key sequence.\n     */\n    exact: CommandRegistry.IKeyBinding | null;\n\n    /**\n     * Whether there are bindings which partially match the sequence.\n     */\n    partial: boolean;\n  }\n\n  /**\n   * Find the key bindings which match a key sequence.\n   *\n   * This returns a match result which contains the best exact matching\n   * binding, and a flag which indicates if there are partial matches.\n   */\n  export function matchKeyBinding(\n    bindings: ReadonlyArray<CommandRegistry.IKeyBinding>,\n    keys: ReadonlyArray<string>,\n    event: KeyboardEvent\n  ): IMatchResult {\n    // The current best exact match.\n    let exact: CommandRegistry.IKeyBinding | null = null;\n\n    // Whether a partial match has been found.\n    let partial = false;\n\n    // The match distance for the exact match.\n    let distance = Infinity;\n\n    // The specificity for the exact match.\n    let specificity = 0;\n\n    // Iterate over the bindings and search for the best match.\n    for (let i = 0, n = bindings.length; i < n; ++i) {\n      // Lookup the current binding.\n      let binding = bindings[i];\n\n      // Check whether the key binding sequence is a match.\n      let sqm = matchSequence(binding.keys, keys);\n\n      // If there is no match, the binding is ignored.\n      if (sqm === SequenceMatch.None) {\n        continue;\n      }\n\n      // If it is a partial match and no other partial match has been\n      // found, ensure the selector matches and set the partial flag.\n      if (sqm === SequenceMatch.Partial) {\n        if (!partial && targetDistance(binding.selector, event) !== -1) {\n          partial = true;\n        }\n        continue;\n      }\n\n      // Ignore the match if the selector doesn't match, or if the\n      // matched node is farther away than the current best match.\n      let td = targetDistance(binding.selector, event);\n      if (td === -1 || td > distance) {\n        continue;\n      }\n\n      // Get the specificity for the selector.\n      let sp = Selector.calculateSpecificity(binding.selector);\n\n      // Update the best match if this match is stronger.\n      if (!exact || td < distance || sp >= specificity) {\n        exact = binding;\n        distance = td;\n        specificity = sp;\n      }\n    }\n\n    // Return the match result.\n    return { exact, partial };\n  }\n\n  /**\n   * Replay a keyboard event.\n   *\n   * This synthetically dispatches a clone of the keyboard event.\n   */\n  export function replayKeyEvent(event: KeyboardEvent): void {\n    event.target!.dispatchEvent(cloneKeyboardEvent(event));\n  }\n\n  export function formatKey(key: string): string {\n    if (Platform.IS_MAC) {\n      return MAC_DISPLAY.hasOwnProperty(key) ? MAC_DISPLAY[key] : key;\n    } else {\n      return WIN_DISPLAY.hasOwnProperty(key) ? WIN_DISPLAY[key] : key;\n    }\n  }\n\n  const MAC_DISPLAY: { [key: string]: string } = {\n    Backspace: '⌫',\n    Tab: '⇥',\n    Enter: '↩',\n    Shift: '⇧',\n    Ctrl: '⌃',\n    Alt: '⌥',\n    Escape: '⎋',\n    PageUp: '⇞',\n    PageDown: '⇟',\n    End: '↘',\n    Home: '↖',\n    ArrowLeft: '←',\n    ArrowUp: '↑',\n    ArrowRight: '→',\n    ArrowDown: '↓',\n    Delete: '⌦',\n    Cmd: '⌘'\n  };\n\n  const WIN_DISPLAY: { [key: string]: string } = {\n    Escape: 'Esc',\n    PageUp: 'Page Up',\n    PageDown: 'Page Down',\n    ArrowLeft: 'Left',\n    ArrowUp: 'Up',\n    ArrowRight: 'Right',\n    ArrowDown: 'Down',\n    Delete: 'Del'\n  };\n\n  /**\n   * A singleton empty string function.\n   */\n  const emptyStringFunc = () => '';\n\n  /**\n   * A singleton `-1` number function\n   */\n  const negativeOneFunc = () => -1;\n\n  /**\n   * A singleton true boolean function.\n   */\n  const trueFunc = () => true;\n\n  /**\n   * A singleton false boolean function.\n   */\n  const falseFunc = () => false;\n\n  /**\n   * A singleton empty dataset function.\n   */\n  const emptyDatasetFunc = () => ({});\n\n  /**\n   * A singleton undefined function\n   */\n  const undefinedFunc = () => undefined;\n\n  /**\n   * Cast a value or command func to a command func.\n   */\n  function asFunc<T>(\n    value: undefined | T | CommandFunc<T>,\n    dfault: CommandFunc<T>\n  ): CommandFunc<T> {\n    if (value === undefined) {\n      return dfault;\n    }\n    if (typeof value === 'function') {\n      return value as CommandFunc<T>;\n    }\n    return () => value;\n  }\n\n  /**\n   * Validate the selector for an options object.\n   *\n   * This returns the validated selector, or throws if the selector is\n   * invalid or contains commas.\n   */\n  function validateSelector(\n    options: CommandRegistry.IKeyBindingOptions\n  ): string {\n    if (options.selector.indexOf(',') !== -1) {\n      throw new Error(`Selector cannot contain commas: ${options.selector}`);\n    }\n    if (!Selector.isValid(options.selector)) {\n      throw new Error(`Invalid selector: ${options.selector}`);\n    }\n    return options.selector;\n  }\n\n  /**\n   * An enum which describes the possible sequence matches.\n   */\n  const enum SequenceMatch {\n    None,\n    Exact,\n    Partial\n  }\n\n  /**\n   * Test whether a key binding sequence matches a key sequence.\n   *\n   * Returns a `SequenceMatch` value indicating the type of match.\n   */\n  function matchSequence(\n    bindKeys: ReadonlyArray<string>,\n    userKeys: ReadonlyArray<string>\n  ): SequenceMatch {\n    if (bindKeys.length < userKeys.length) {\n      return SequenceMatch.None;\n    }\n    for (let i = 0, n = userKeys.length; i < n; ++i) {\n      if (bindKeys[i] !== userKeys[i]) {\n        return SequenceMatch.None;\n      }\n    }\n    if (bindKeys.length > userKeys.length) {\n      return SequenceMatch.Partial;\n    }\n    return SequenceMatch.Exact;\n  }\n\n  /**\n   * Find the distance from the target node to the first matching node.\n   *\n   * This traverses the event path from `target` to `currentTarget` and\n   * computes the distance from `target` to the first node which matches\n   * the CSS selector. If no match is found, `-1` is returned.\n   */\n  function targetDistance(selector: string, event: KeyboardEvent): number {\n    let targ = event.target as Element | null;\n    let curr = event.currentTarget as Element | null;\n    for (let dist = 0; targ !== null; targ = targ.parentElement, ++dist) {\n      if (targ.hasAttribute('data-lm-suppress-shortcuts')) {\n        return -1;\n      }\n      /* <DEPRECATED> */\n      if (targ.hasAttribute('data-p-suppress-shortcuts')) {\n        return -1;\n      }\n      /* </DEPRECATED> */\n      if (Selector.matches(targ, selector)) {\n        return dist;\n      }\n      if (targ === curr) {\n        return -1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Clone a keyboard event.\n   */\n  function cloneKeyboardEvent(event: KeyboardEvent): KeyboardEvent {\n    // A custom event is required because Chrome nulls out the\n    // `keyCode` field in user-generated `KeyboardEvent` types.\n    let clone = document.createEvent('Event') as any;\n    let bubbles = event.bubbles || true;\n    let cancelable = event.cancelable || true;\n    clone.initEvent(event.type || 'keydown', bubbles, cancelable);\n    clone.key = event.key || '';\n    clone.keyCode = event.keyCode || 0;\n    clone.which = event.keyCode || 0;\n    clone.ctrlKey = event.ctrlKey || false;\n    clone.altKey = event.altKey || false;\n    clone.shiftKey = event.shiftKey || false;\n    clone.metaKey = event.metaKey || false;\n    clone.view = event.view || window;\n    return clone as KeyboardEvent;\n  }\n}\n"],"names":["Signal","DisposableDelegate","JSONExt","ArrayExt","Platform","getKeyboardLayout","CommandRegistry","Selector"],"mappings":"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"}